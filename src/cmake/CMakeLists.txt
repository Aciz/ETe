CMAKE_MINIMUM_REQUIRED(VERSION 3.13)

PROJECT(ete C CXX)

SET(CNAME "ete")
SET(DNAME "ete.ded")

SET(RENDERER_PREFIX ${CNAME})
SET(RENDERER_DEFAULT opengl) # valid options: opengl, vulkan

OPTION(USE_SDL2 "" ON)
OPTION(USE_DISCORD "" OFF)
#OPTION(USE_LOCAL_HEADERS "" ON)
OPTION(USE_VULKAN "" ON)
OPTION(USE_SYSTEM_JPEG "" OFF)
OPTION(USE_RENDERER_DLOPEN "" ON)
OPTION(ENABLE_SPLINES "" ON)
OPTION(BUILD_ETMAIN_MOD "" ON)

SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

INCLUDE(sources/qcommon)

SET(ETE_X64 OFF)
SET(ETE_X86 OFF)
SET(ETE_ARM64 OFF)
SET(ETE_ARM32 OFF)

IF(CMAKE_SYSTEM_PROCESSOR MATCHES AMD64|x86_64|x86|i*86)
	IF(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
		IF(WIN32)
			SET(BINEXT .x64)
			SET(DLLEXT _mp_x64)
		ELSE()
			SET(BINEXT .x86_64)
			SET(DLLEXT .mp.x86_64)
		ENDIF()
		SET(RENDEXT _x86_64)
		SET(ETE_X64 ON)
	ELSE()
		IF(WIN32)
			SET(DLLEXT _mp_x86)
		ELSE()
			SET(DLLEXT .mp.i386)
		ENDIF()
		#SET(BINEXT .x86)
		SET(RENDEXT _x86)
		SET(ETE_X86 ON)
	ENDIF()
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES aarch64|arm64)
	SET(BINEXT .aarch64)
	SET(RENDEXT _aarch64)
	IF(WIN32)
		SET(DLLEXT _mp_aarch64)
	ELSE()
		SET(DLLEXT .mp.aarch64)
	ENDIF()
	SET(ETE_ARM64 ON)
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES arm*)
	SET(BINEXT .arm)
	SET(RENDEXT _arm)
	IF(WIN32)
		SET(DLLEXT _mp_arm)
	ELSE()
		SET(DLLEXT .mp.arm)
	ENDIF()
	SET(ETE_ARM64 ON)
ELSE()
	#TARGET_COMPILE_DEFINITIONS(qcommon PRIVATE -DNO_VM_COMPILED)
	#TARGET_COMPILE_DEFINITIONS(qcommon_ded PRIVATE -DNO_VM_COMPILED)
ENDIF()

IF(LINUX)
	INCLUDE(system/linux)
ELSEIF(APPLE)
	INCLUDE(system/macos)
ENDIF()

IF(CMAKE_C_COMPILER_ID MATCHES "Clang")
	INCLUDE(system/clang)
ELSEIF(CMAKE_C_COMPILER_ID MATCHES "GNU" AND NOT WIN32)
	INCLUDE(system/gcc)
ELSEIF(MINGW)
	INCLUDE(system/win-mingw)
ELSEIF(MSVC)
	INCLUDE(system/win-msvc)
ENDIF()

IF(APPLE)
	SET(DLLEXT _mac)
ENDIF()

ADD_COMPILE_OPTIONS("$<$<CONFIG:DEBUG>:${compiler_flags_debug}>")
ADD_COMPILE_OPTIONS("$<$<CONFIG:RELEASE>:${compiler_flags_release}>")
ADD_COMPILE_OPTIONS("$<$<CONFIG:RELWITHDEBINFO>:${compiler_flags_relwithdebinfo}>")

# splines
IF(ENABLE_SPLINES)
	INCLUDE(sources/splines)
	ADD_LIBRARY(splines OBJECT ${SPLINES_SRCS})
ENDIF()

INCLUDE(sources/server)

# universal binary
ADD_LIBRARY(qcommon OBJECT ${QCOMMON_SRCS} ${SERVER_SRCS})

# dedicated server
ADD_LIBRARY(qcommon_ded OBJECT ${QCOMMON_SRCS} ${SERVER_SRCS})
TARGET_COMPILE_DEFINITIONS(qcommon_ded PUBLIC DEDICATED)

# client
INCLUDE(sources/client)

find_package(CURL REQUIRED)

# jpeg
IF(USE_SYSTEM_JPEG)
	ADD_LIBRARY(client OBJECT ${CLIENT_SRCS})
	find_package(JPEG REQUIRED)
	TARGET_COMPILE_DEFINITIONS(client PRIVATE USE_SYSTEM_JPEG)
	TARGET_LINK_LIBRARIES(client PRIVATE ${JPEG_LIBRARIES})
ELSE()
	INCLUDE(sources/jpeg)
	#ADD_LIBRARY(jpeg ${JPEG_SRCS})
	#TARGET_LINK_LIBRARIES(client jpeg)
	ADD_LIBRARY(client OBJECT ${CLIENT_SRCS} ${JPEG_SRCS})
ENDIF()

# cURL
#TARGET_LINK_LIBRARIES(client PRIVATE ${CURL_LIBRARIES})
TARGET_COMPILE_DEFINITIONS(client PRIVATE USE_CURL USE_CURL_DLOPEN)

# renderers
INCLUDE(sources/renderer_common)
INCLUDE(sources/renderer_gl)
IF(USE_VULKAN)
	INCLUDE(sources/renderer_vk)
ENDIF()

IF(USE_RENDERER_DLOPEN)
	SET(AUX_SRCS
		qcommon/q_shared.c
		qcommon/puff.c
		qcommon/q_math.c
	)
	TARGET_COMPILE_DEFINITIONS(client PRIVATE USE_RENDERER_DLOPEN RENDERER_PREFIX="${RENDERER_PREFIX}") # RENDERER_DEFAULT="${RENDERER_DEFAULT}")
	TARGET_COMPILE_DEFINITIONS(client PRIVATE RENDERER_DEFAULT=${RENDERER_DEFAULT})

	ADD_LIBRARY(${RENDERER_PREFIX}_opengl${RENDEXT} SHARED ${RENDERER_GL_SRCS} ${RENDERER_COMMON_SRCS} ${AUX_SRCS})
	SET_TARGET_PROPERTIES(${RENDERER_PREFIX}_opengl${RENDEXT} PROPERTIES PREFIX "")
	TARGET_COMPILE_DEFINITIONS(${RENDERER_PREFIX}_opengl${RENDEXT} PRIVATE USE_RENDERER_DLOPEN)

	IF(USE_VULKAN)
		ADD_LIBRARY(${RENDERER_PREFIX}_vulkan${RENDEXT} SHARED ${RENDERER_VK_SRCS} ${RENDERER_COMMON_SRCS} ${AUX_SRCS})
		SET_TARGET_PROPERTIES(${RENDERER_PREFIX}_vulkan${RENDEXT} PROPERTIES PREFIX "")
		TARGET_COMPILE_DEFINITIONS(${RENDERER_PREFIX}_vulkan${RENDEXT} PRIVATE USE_RENDERER_DLOPEN)
	ENDIF()
ELSE()
	IF(USE_VULKAN)
		ADD_LIBRARY(${RENDERER_PREFIX}_vulkan OBJECT ${RENDERER_VK_SRCS} ${RENDERER_COMMON_SRCS})
	ELSE()
		ADD_LIBRARY(${RENDERER_PREFIX}_opengl OBJECT ${RENDERER_GL_SRCS} ${RENDERER_COMMON_SRCS})
	ENDIF()
ENDIF()

# common function, window system
IF(UNIX)
	SET (ET_SRCS
		unix/unix_main.c
		unix/unix_shared.c
		unix/linux_signals.c)

	IF(USE_SDL2)
		include(sources/sdl)
	ELSE()
		SET(ET_GUI_SRCS
			unix/linux_glimp.c
			unix/linux_qgl.c
			unix/linux_snd.c
			unix/x11_dga.c
			unix/x11_randr.c
			unix/x11_vidmode.c)
		IF(USE_VULKAN)
			list(APPEND ET_GUI_SRCS unix/linux_qvk.c)
		ENDIF()
	ENDIF()

	IF(APPLE)
		SET(EXE_TYPE MACOSX_BUNDLE)
		list(APPEND ET_SRCS unix/quake3_flat.icns)
		set_source_files_properties(unix/quake3_flat.icns PROPERTIES
			MACOSX_PACKAGE_LOCATION Resources)
		SET(MACOSX_BUNDLE_ICON_FILE quake3_flat.icns)
	ENDIF()
ELSEIF(WIN32)
	SET(EXE_TYPE WIN32)
	IF(MSVC)
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /MANIFEST:NO")
		ADD_COMPILE_DEFINITIONS(_CRT_SECURE_NO_WARNINGS) # v3.12+
	ENDIF()

	SET(ET_SRCS
		win32/win_dpi.c
		win32/win_eh.cpp
		win32/win_main.c
		win32/win_shared.c
		win32/win_syscon.c
		win32/win_resource.rc)

	SET(ET_GUI_SRCS
		win32/win_gamma.c
		win32/win_glimp.c
		win32/win_input.c
		win32/win_minimize.c
		win32/win_qgl.c
		win32/win_snd.c
		win32/win_wndproc.c)
	IF(USE_VULKAN)
		list(APPEND ET_GUI_SRCS win32/win_qvk.c)
	ENDIF()
ENDIF(UNIX)

ADD_LIBRARY(etgui OBJECT ${ET_GUI_SRCS})

IF(NOT MSVC)
	IF(USE_SDL2)
		find_package(SDL2 REQUIRED CONFIG)
		IF (TARGET SDL2::SDL2)
			SET(SDL2_INCLUDE_DIRS "")
			SET(SDL2_LIBRARIES SDL2::SDL2)
		endif()

		STRING(STRIP ${SDL2_LIBRARIES} SDL2_LIBRARIES)
		TARGET_LINK_LIBRARIES(etgui PRIVATE ${SDL2_LIBRARIES})
		TARGET_COMPILE_DEFINITIONS(etgui PRIVATE USE_SDL USE_ICON)
		TARGET_COMPILE_DEFINITIONS(client PRIVATE USE_SDL)
	ELSEIF(UNIX)
		find_package (X11 REQUIRED)
		TARGET_LINK_LIBRARIES(etgui PRIVATE ${X11_LIBRARIES})
	ENDIF()
ENDIF()

TARGET_COMPILE_DEFINITIONS(etgui PRIVATE USE_OPENGL_API)
TARGET_COMPILE_DEFINITIONS(client PRIVATE USE_OPENGL_API)

TARGET_COMPILE_DEFINITIONS(etgui PUBLIC USE_JOYSTICK)
TARGET_COMPILE_DEFINITIONS(client PUBLIC USE_JOYSTICK)

# splines camera 
IF(ENABLE_SPLINES)
	TARGET_COMPILE_DEFINITIONS(client PUBLIC ENABLE_SPLINES)
ENDIF()

# discord rich presence
# TODO WINDOWS, ONLY LINUX, AND ERROR ON OTHER PLATFORM/ARCH?
IF(USE_DISCORD)
	IF(ETE_X64)
		IF(NOT WIN32)
			find_library(DISCORDRPC_LIBRARY discord-rpc
				PATHS discord/linux/linux64-dynamic
				PATH_SUFFIXES lib
				NO_DEFAULT_PATH
				REQUIRED
			)
			find_path(DISCORDRPC_INCLUDE
				NAMES discord_register.h discord_rpc.h
				PATHS discord/linux/linux64-dynamic
				PATH_SUFFIXES include
				NO_DEFAULT_PATH
				REQUIRED
			)
		ENDIF()
	ELSEIF(ETE_X86)
		IF(NOT WIN32)
			find_library(DISCORDRPC_LIBRARY discord-rpc
				PATHS discord/linux/linux32-dynamic
				PATH_SUFFIXES lib
				NO_DEFAULT_PATH
				REQUIRED
			)
			find_path(DISCORDRPC_INCLUDE
				NAMES discord_register.h discord_rpc.h
				PATHS discord/linux/linux32-dynamic
				PATH_SUFFIXES include
				NO_DEFAULT_PATH
				REQUIRED
			)
		ENDIF()
	ENDIF()
	#target_link_libraries(client PRIVATE ${DISCORDRPC_LIBRARY})
	target_include_directories(client PRIVATE ${DISCORDRPC_INCLUDE})
	TARGET_COMPILE_DEFINITIONS(client PUBLIC USE_DISCORD)
ENDIF()

IF(USE_VULKAN)
	TARGET_COMPILE_DEFINITIONS(etgui PRIVATE USE_VULKAN_API)
	TARGET_COMPILE_DEFINITIONS(client PRIVATE USE_VULKAN_API)
ENDIF()

# client executable

ADD_EXECUTABLE(${CNAME}${BINEXT} ${EXE_TYPE} ${ET_SRCS})
TARGET_LINK_LIBRARIES(${CNAME}${BINEXT} qcommon client etgui)
#TARGET_LINK_OPTIONS(${CNAME} PRIVATE -fno-pie) # v3.13+

IF(NOT MSVC)
	IF(USE_SDL2)
		TARGET_COMPILE_DEFINITIONS(${CNAME}${BINEXT} PRIVATE USE_SDL)
	ENDIF()
ENDIF()

IF(ENABLE_SPLINES)
	TARGET_LINK_LIBRARIES(${CNAME}${BINEXT} splines)
ENDIF()

IF(NOT USE_RENDERER_DLOPEN)
	IF(USE_VULKAN)
		TARGET_LINK_LIBRARIES(${CNAME}${BINEXT} ${RENDERER_PREFIX}_vulkan)
	ELSE()
		TARGET_LINK_LIBRARIES(${CNAME}${BINEXT} ${RENDERER_PREFIX}_opengl)
	ENDIF()
ENDIF()

# dedicated server executable

ADD_EXECUTABLE(${DNAME}${BINEXT} ${EXE_TYPE} ${ET_SRCS})
TARGET_LINK_LIBRARIES(${DNAME}${BINEXT} qcommon_ded)
#TARGET_LINK_OPTIONS(${DNAME} PRIVATE -fno-pie) # v3.13+

IF(WIN32)
	TARGET_LINK_LIBRARIES(${CNAME}${BINEXT} winmm comctl32 ws2_32)
	TARGET_LINK_LIBRARIES(${DNAME}${BINEXT} winmm comctl32 ws2_32)
ELSE()
	TARGET_LINK_LIBRARIES(${CNAME}${BINEXT} m pthread ${CMAKE_DL_LIBS})
	TARGET_LINK_LIBRARIES(${DNAME}${BINEXT} m pthread ${CMAKE_DL_LIBS})
ENDIF()

# etmain mod shared libraries (so/dll/dylib)

IF(BUILD_ETMAIN_MOD)
	INCLUDE(sources/cgame)
	ADD_LIBRARY(cgame${DLLEXT} SHARED ${CGAME_SRCS})
	SET_TARGET_PROPERTIES(cgame${DLLEXT} PROPERTIES PREFIX "")
	TARGET_COMPILE_DEFINITIONS(cgame${DLLEXT} PRIVATE CGAMEDLL)
	TARGET_LINK_LIBRARIES(cgame${DLLEXT} m ${CMAKE_DL_LIBS})

	INCLUDE(sources/game)
	ADD_LIBRARY(qagame${DLLEXT} SHARED ${GAME_SRCS})
	SET_TARGET_PROPERTIES(qagame${DLLEXT} PROPERTIES PREFIX "")
	TARGET_COMPILE_DEFINITIONS(qagame${DLLEXT} PRIVATE GAMEDLL NO_BOT_SUPPORT)
	TARGET_LINK_LIBRARIES(qagame${DLLEXT} m ${CMAKE_DL_LIBS})

	INCLUDE(sources/ui)
	ADD_LIBRARY(ui${DLLEXT} SHARED ${UI_SRCS})
	SET_TARGET_PROPERTIES(ui${DLLEXT} PROPERTIES PREFIX "")
	TARGET_COMPILE_DEFINITIONS(ui${DLLEXT} PRIVATE UIDLL)
	TARGET_LINK_LIBRARIES(ui${DLLEXT} m ${CMAKE_DL_LIBS})

	ADD_CUSTOM_TARGET(mp_bina.pk3 ALL
        COMMAND ${CMAKE_COMMAND} -E tar "cfv" "mp_bina.pk3" --format=zip $<TARGET_FILE:cgame${DLLEXT}> $<TARGET_FILE:ui${DLLEXT}>
        DEPENDS cgame${DLLEXT} ui${DLLEXT}
    )
ENDIF()

INSTALL(TARGETS ${DNAME}${BINEXT}
    	RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}
)

INSTALL(TARGETS ${CNAME}${BINEXT}
    	RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}
)

IF(USE_RENDERER_DLOPEN)
    INSTALL(TARGETS ${RENDERER_PREFIX}_opengl${RENDEXT}
            LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}
    )
	IF(USE_VULKAN)
		INSTALL(TARGETS ${RENDERER_PREFIX}_vulkan${RENDEXT}
			LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}
		)
	ENDIF()
ENDIF()

IF(USE_DISCORD)
        IF(ETE_X64)
            INSTALL(FILES ${DISCORDRPC_LIBRARY}
                    DESTINATION ${CMAKE_INSTALL_PREFIX}
                    RENAME libdiscord-rpc.x86_64.so
			)
        ELSEIF(ETE_X86)
            INSTALL(FILES ${DISCORDRPC_LIBRARY}
                    DESTINATION ${CMAKE_INSTALL_PREFIX}
			)
        ELSE()
        ENDIF()
ENDIF()

IF(BUILD_ETMAIN_MOD)
    INSTALL(TARGETS cgame${DLLEXT} qagame${DLLEXT} ui${DLLEXT}
            LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/etmain"
    )
    INSTALL(FILES "${CMAKE_BINARY_DIR}/mp_bina.pk3"
            DESTINATION "${CMAKE_INSTALL_PREFIX}/etmain"
    )
endif(BUILD_ETMAIN_MOD)
