name: build

on:
  # Run on pushes to tags, the "master" branch, and PR's
  push:
    tags-ignore:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'
  pull_request:
    paths-ignore:
      - '**.md'
      - '*.txt'
      - '.gitignore'
      - 'docs/*'

  workflow_dispatch:

jobs:
  windows-msvc:
    name: ${{ matrix.config }} Windows ${{ matrix.arch }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        #arch: [arm64, x86, x64]
        #arch: [x86, x64]
        arch: [x86]
        config: [Release]
        include:
         # - arch: arm64
         #   platform: ARM64
         #   suffix: .arm64

          - arch: x86
            platform: Win32

          #- arch: x64
          #  platform: x64
          #  suffix: .x86_64

    steps:
    - uses: microsoft/setup-msbuild@v1.0.2

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Binary Directory
      working-directory: ${{github.workspace}}
      run: cmake -E make_directory ${{github.workspace}}/bin

    - name: Build
      working-directory: ${{github.workspace}}/src
      run: |
        msbuild wolfded.vcxproj -m -p:PlatformToolset=v141_xp,Configuration=${{ matrix.config }},Platform=${{ matrix.platform }}
        msbuild renderer\renderer.vcxproj -m -p:PlatformToolset=v141_xp,Configuration=${{ matrix.config }},Platform=${{ matrix.platform }}
        msbuild wolf.vcxproj -m -p:PlatformToolset=v141_xp,Configuration=${{ matrix.config }},Platform=${{ matrix.platform }},UseWasapi=USE_WASAPI=0

    - name: Copy outputs to Binary Directory
      working-directory: ${{github.workspace}}/src
      run: |
          copy ded\Release\ETe-ded.exe ${{github.workspace}}\bin\ETe-ded${{ matrix.suffix }}.exe
          copy Release\ETe.exe ${{github.workspace}}\bin\ETe${{ matrix.suffix }}.exe
    - uses: actions/upload-artifact@v2
      if: ${{ matrix.config == 'Release' }}
      with:
        name: windows-${{ matrix.arch }}
        path: |
          bin/*.exe
        if-no-files-found: error
        retention-days: 5

  windows-msvc-etmain:
    name: ${{ matrix.config }} Windows etmain ${{ matrix.arch }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        #arch: [arm64, x86, x64]
        #arch: [x86, x64]
        arch: [x86]
        config: [Release]
        include:
         # - arch: arm64
         #   platform: ARM64
         #   suffix: .arm64

          - arch: x86
            platform: Win32

          #- arch: x64
          #  platform: x64
          #  suffix: .x86_64

    steps:
    - uses: microsoft/setup-msbuild@v1.0.2

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Binary Directory
      working-directory: ${{github.workspace}}
      run: cmake -E make_directory ${{github.workspace}}/bin

    - name: Build
      working-directory: ${{github.workspace}}/src
      run: |
        msbuild game\game.vcxproj -m -p:PlatformToolset=v141_xp,Configuration=${{ matrix.config }},Platform=${{ matrix.platform }}
        msbuild ui\ui.vcxproj -m -p:PlatformToolset=v141_xp,Configuration=${{ matrix.config }},Platform=${{ matrix.platform }}
        msbuild cgame\cgame.vcxproj -m -p:PlatformToolset=v141_xp,Configuration=${{ matrix.config }},Platform=${{ matrix.platform }}
    - name: Copy outputs to Binary Directory
      working-directory: ${{github.workspace}}/src
      run: |
          copy Release\qagame_mp_x86.dll ${{github.workspace}}\bin\
          copy Release\ui_mp_x86.dll ${{github.workspace}}\bin\
          copy Release\cgame_mp_x86.dll ${{github.workspace}}\bin\
    - uses: actions/upload-artifact@v2
      if: ${{ matrix.config == 'Release' }}
      with:
        name: windows-${{ matrix.arch }}
        path: |
          bin/*.dll
        if-no-files-found: error
        retention-days: 5

  ubuntu-x86:
    name: ${{ matrix.config }} Ubuntu ${{ matrix.arch }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        cc: [gcc]
        cxx: [g++]
        config: [Release]
        include:
          - config: Release
            rule: install
          - arch: x86
            use_sdl: true
          - arch: x86_64
            use_sdl: true

    steps:
    - name: Install tools
      run: |
        if [ ${{ matrix.arch }} == "x86" ]; then
          sudo dpkg --add-architecture i386
          sudo apt-get -qq update
          sudo apt-get -y install gcc-multilib g++-multilib ninja-build libglib2.0-dev:i386 libgl1-mesa-dev:i386 libasound2-dev:i386 libpulse-dev:i386 libjpeg-dev:i386 libsdl2-dev:i386 libcurl4-openssl-dev:i386
        else
          sudo apt-get -qq update
          sudo apt-get -y install ninja-build libglib2.0-dev libgl1-mesa-dev libasound2-dev libpulse-dev libjpeg-dev libsdl2-dev libcurl4-openssl-dev
        fi
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Directory
      working-directory: ${{github.workspace}}/src
      run: cmake -E make_directory ${{github.workspace}}/src/bin

    - name: Configure CMake
      working-directory: ${{github.workspace}}/src/bin
      run: |
        if [ ${{ matrix.arch }} == "x86" ]; then
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DUSE_SDL2=${{ matrix.use_sdl }} -DBUILD_ETMAIN_MOD=OFF -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/linux-i686.cmake
        else
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DUSE_SDL2=${{ matrix.use_sdl }} -DBUILD_ETMAIN_MOD=OFF
        fi

    - name: Build
      working-directory: ${{github.workspace}}/src/bin
      run: cmake --build . --config ${{ matrix.config }}

    - uses: actions/upload-artifact@v2
      if: matrix.cc == 'gcc' && matrix.config == 'Release'
      with:
        name: linux-${{ matrix.arch }}
        path: |
          src/bin/ete*.${{ matrix.arch }}
        if-no-files-found: error
        retention-days: 5

  ubuntu-x86-etmain:
    name: ${{ matrix.config }} Ubuntu etmain ${{ matrix.arch }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        cc: [gcc]
        cxx: [g++]
        config: [Release]
        include:
          - config: Release
            rule: install

    steps:
    - name: Install tools
      run: |
        if [ ${{ matrix.arch }} == "x86" ]; then
          sudo dpkg --add-architecture i386
          sudo apt-get -qq update
          sudo apt-get -y install gcc-multilib g++-multilib ninja-build libglib2.0-dev:i386
        else
          sudo apt-get -qq update
          sudo apt-get -y install ninja-build libglib2.0-dev
        fi
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Directory
      working-directory: ${{github.workspace}}/src
      run: cmake -E make_directory ${{github.workspace}}/src/bin

    - name: Configure CMake
      working-directory: ${{github.workspace}}/src/bin
      run: |
        if [ ${{ matrix.arch }} == "x86" ]; then
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DBUILD_DEDSERVER=OFF -DBUILD_CLIENT=OFF -DBUILD_ETMAIN_MOD=ON -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/linux-i686.cmake
        else
          cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DBUILD_DEDSERVER=OFF -DBUILD_CLIENT=OFF -DBUILD_ETMAIN_MOD=ON
        fi

    - name: Build
      working-directory: ${{github.workspace}}/src/bin
      run: cmake --build . --config ${{ matrix.config }}

    - uses: actions/upload-artifact@v2
      if: matrix.cc == 'gcc' && matrix.config == 'Release'
      with:
        name: linux-${{ matrix.arch }}
        path: |
          src/bin/*.so
        if-no-files-found: error
        retention-days: 5

  macos-x86:
    name: ${{ matrix.config }} macOS ${{ matrix.arch }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        cc: [clang]
        cxx: [clang++]
        config: [Release]
        include:
          - config: Release
            rule: install

    steps:
    - name: Install tools
      run: brew install coreutils ninja sdl2

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Directory
      working-directory: ${{github.workspace}}/src
      run: cmake -E make_directory ${{github.workspace}}/src/bin

    - name: Configure CMake
      working-directory: ${{github.workspace}}/src/bin
      run: cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DUSE_SDL2=TRUE -DBUILD_ETMAIN_MOD=OFF

    - name: Build
      working-directory: ${{github.workspace}}/src/bin
      run: cmake --build . --config ${{ matrix.config }}

    - uses: actions/upload-artifact@v2
      if: matrix.cc == 'clang' && matrix.config == 'Release'
      with:
        name: macos-${{ matrix.arch }}
        path: |
          src/bin/ete*.${{ matrix.arch }}
        if-no-files-found: error
        retention-days: 5

  macos-x86-etmain:
    name: ${{ matrix.config }} macOS etmain ${{ matrix.arch }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]
        cc: [clang]
        cxx: [clang++]
        config: [Release]
        include:
          - config: Release
            rule: install

    steps:
    - name: Install tools
      run: brew install coreutils ninja

    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Directory
      working-directory: ${{github.workspace}}/src
      run: cmake -E make_directory ${{github.workspace}}/src/bin

    - name: Configure CMake
      working-directory: ${{github.workspace}}/src/bin
      run: cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.config }} -DBUILD_DEDSERVER=FALSE -DBUILD_CLIENT=FALSE -DBUILD_ETMAIN_MOD=TRUE

    - name: Build
      working-directory: ${{github.workspace}}/src/bin
      run: cmake --build . --config ${{ matrix.config }}

    - uses: actions/upload-artifact@v2
      if: matrix.cc == 'clang' && matrix.config == 'Release'
      with:
        name: macos-${{ matrix.arch }}
        path: |
          src/bin/*.dylib
          src/bin/*_mac
        if-no-files-found: error
        retention-days: 5

  create-testing:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [windows-msvc, windows-msvc-etmain, ubuntu-x86, ubuntu-x86-etmain, macos-x86, macos-x86-etmain]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Create binary archives
        run: |
          7z a -r ete-linux-x86.zip           ./linux-x86/* -x!*.so
          7z a -r ete-linux-x86_64.zip         ./linux-x86_64/* -x!*.so
          7z a -r ete-windows-msvc-x86.zip     ./windows-x86/* -x!*.dll
          7z a -r ete-macos-x86_64.zip         ./macos-x86_64/* -x!*.dylib
          mkdir -p etmain
          mv -t  ./etmain/ ./linux-x86/*.so
          mv -t  ./etmain/ ./linux-x86_64/*.so
          mv -t  ./etmain/ ./windows-x86/*.dll
          mv -t  ./etmain/ ./macos-x86_64/*.dylib
          cd etmain
          7z a -r -tzip mp_bina.pk3      ./*.so
          7z a -r -tzip mp_bina.pk3      ./*.dll
          cd ..
          7z a -r ete-etmain-all.zip      ./etmain/*.pk3
          7z a -r ete-etmain-all.zip      ./etmain/*.so
          7z a -r ete-etmain-all.zip      ./etmain/*.dll

#TODO other builds
#NOTE purposely skipping etmain for macos as it is not really functional
#7z a -r ete-windows-mingw-x86.zip    ./windows-mingw-x86/* -x!*.dll
#7z a -r ete-windows-mingw-x86_64.zip ./windows-mingw-x86_64/* -x!*.dll
#7z a -r ete-windows-msvc-x86_64.zip  ./windows-x86_64/* -x!*.dll
#7z a -r ete-windows-msvc-arm64.zip   ./windows-arm64/* -x!*.dll
#7z a -r ete-macos-arm64.zip         ./macos-arm64/* -x!*.dylib
#7z a -r ete-linux-aarch64.zip  ./linux-aarch64/*
#7z a -r ete-linux-armv7.zip    ./linux-armv7/*
#7z a -r -tzip mp_bina.pk3      ./*.dylib

      - name: Create latest build
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: false
          title: Latest Build
          files: |
            *.zip
  
  #mp_bin:
  #  name: Generate mp_bina.pk3
  #  runs-on: ubuntu-latest
  #  needs: [ windows-msvc-etmain, ubuntu-x86-etmain ] #, macos-x86-etmain ]
  #  steps:
  #    #- uses: actions/checkout@v2
#
  #    - uses: actions/download-artifact@v2
#
  #    - name: Generate the pk3
  #      run: |
  #        zip -rvj mp_bina.pk3 linux-x86/*.so linux-x86_64/*.so macos-x86_64/*.dylib windows-x86/*.dll -x qagame*.so -x qagame*.dll -x qagame*.dylib
#
  #    - uses: actions/upload-artifact@v2
  #      with:
  #        name: etmain-all-os-pak
  #        path: mp_bina.pk3